import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime
import io

# Configuration de la page
st.set_page_config(
    page_title="Convertisseur Bilan Social",
    page_icon="üîÑ",
    layout="wide"
)

# Titre et introduction
st.title("üîÑ Convertisseur de Bilan Social")
st.markdown("""
Cette application vous permet de convertir les donn√©es de votre bilan social au format requis pour l'√©valuation de la diversit√© et inclusion.
""")

# Fonction pour cr√©er le mod√®le Excel
def create_excel_template():
    # Cr√©ation d'un DataFrame avec les champs n√©cessaires
    df = pd.DataFrame({
        'Information': [
            'Nom de l\'entreprise',
            'Ann√©e',
            'Effectif total',
            'Nombre de femmes',
            'Nombre de cadres',
            'Nombre de femmes cadres',
            'Nombre de salari√©s en situation de handicap',
            'Nombre de jours travaill√©s',
            'Nombre de jours d\'absence',
            'R√©partition par √¢ge - Moins de 30 ans',
            'R√©partition par √¢ge - 30-50 ans',
            'R√©partition par √¢ge - Plus de 50 ans',
            'Salaire moyen hommes (‚Ç¨)',
            'Salaire moyen femmes (‚Ç¨)'
        ],
        'Valeur': ['', '', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        'Unit√©': ['', '', 'personnes', 'personnes', 'personnes', 'personnes', 'personnes', 'jours', 'jours', 'personnes', 'personnes', 'personnes', '‚Ç¨', '‚Ç¨']
    })
    
    # Cr√©ation du fichier Excel
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, sheet_name='Donn√©es', index=False)
        workbook = writer.book
        worksheet = writer.sheets['Donn√©es']
        
        # Format pour les en-t√™tes
        header_format = workbook.add_format({
            'bold': True,
            'bg_color': '#4472C4',
            'font_color': 'white',
            'border': 1
        })
        
        # Format pour les nombres
        number_format = workbook.add_format({'num_format': '#,##0'})
        
        # Appliquer les formats
        for col_num, value in enumerate(df.columns.values):
            worksheet.write(0, col_num, value, header_format)
        
        # Ajuster les largeurs de colonnes
        worksheet.set_column('A:A', 40)
        worksheet.set_column('B:B', 20)
        worksheet.set_column('C:C', 20)
        
        # Ajouter des validations
        for row in range(1, len(df) + 1):
            worksheet.write(row, 1, df.iloc[row-1]['Valeur'], number_format)
    
    return output.getvalue()

# Fonction pour convertir les donn√©es
def convert_data(df):
    try:
        # V√©rification des donn√©es requises
        required_fields = ['Information', 'Valeur']
        if not all(field in df.columns for field in required_fields):
            raise ValueError("Le fichier Excel doit contenir les colonnes 'Information' et 'Valeur'")
        
        # Extraction des donn√©es
        nom_entreprise = str(df.iloc[0]['Valeur'])
        if not nom_entreprise:
            raise ValueError("Le nom de l'entreprise est requis")
            
        annee = int(df.iloc[1]['Valeur'])
        if annee < 2000 or annee > datetime.now().year:
            raise ValueError(f"L'ann√©e doit √™tre comprise entre 2000 et {datetime.now().year}")
        
        # Calcul des indicateurs
        effectif_total = float(df.iloc[2]['Valeur'])
        if effectif_total <= 0:
            raise ValueError("L'effectif total doit √™tre sup√©rieur √† 0")
            
        nb_femmes = float(df.iloc[3]['Valeur'])
        if nb_femmes < 0 or nb_femmes > effectif_total:
            raise ValueError("Le nombre de femmes doit √™tre compris entre 0 et l'effectif total")
            
        nb_cadres = float(df.iloc[4]['Valeur'])
        if nb_cadres < 0 or nb_cadres > effectif_total:
            raise ValueError("Le nombre de cadres doit √™tre compris entre 0 et l'effectif total")
            
        nb_femmes_cadres = float(df.iloc[5]['Valeur'])
        if nb_femmes_cadres < 0 or nb_femmes_cadres > nb_cadres:
            raise ValueError("Le nombre de femmes cadres doit √™tre compris entre 0 et le nombre total de cadres")
            
        nb_handicap = float(df.iloc[6]['Valeur'])
        if nb_handicap < 0 or nb_handicap > effectif_total:
            raise ValueError("Le nombre de salari√©s en situation de handicap doit √™tre compris entre 0 et l'effectif total")
            
        jours_travailles = float(df.iloc[7]['Valeur'])
        if jours_travailles <= 0:
            raise ValueError("Le nombre de jours travaill√©s doit √™tre sup√©rieur √† 0")
            
        jours_absence = float(df.iloc[8]['Valeur'])
        if jours_absence < 0:
            raise ValueError("Le nombre de jours d'absence ne peut pas √™tre n√©gatif")
            
        # R√©cup√©ration des effectifs par √¢ge
        moins_30 = float(df.iloc[9]['Valeur'])
        entre_30_50 = float(df.iloc[10]['Valeur'])
        plus_50 = float(df.iloc[11]['Valeur'])
        
        # V√©rification de la coh√©rence des effectifs par √¢ge
        total_age = moins_30 + entre_30_50 + plus_50
        if abs(total_age - effectif_total) > 1:  # Tol√©rance de 1 personne pour les arrondis
            raise ValueError("La somme des effectifs par √¢ge doit correspondre √† l'effectif total")
        
        # Calcul des pourcentages
        taux_feminisation = (nb_femmes / effectif_total) * 100
        taux_femmes_cadres = (nb_femmes_cadres / nb_cadres) * 100 if nb_cadres > 0 else 0
        taux_handicap = (nb_handicap / effectif_total) * 100
        
        # Calcul des pourcentages par √¢ge
        moins_30_pct = (moins_30 / effectif_total) * 100
        entre_30_50_pct = (entre_30_50 / effectif_total) * 100
        plus_50_pct = (plus_50 / effectif_total) * 100
        
        # Calcul de l'√©cart salarial
        salaire_hommes = float(df.iloc[12]['Valeur'])
        salaire_femmes = float(df.iloc[13]['Valeur'])
        if salaire_hommes <= 0 or salaire_femmes <= 0:
            raise ValueError("Les salaires moyens doivent √™tre sup√©rieurs √† 0")
        ecart_salaire = ((salaire_hommes - salaire_femmes) / salaire_hommes) * 100
        
        # Calcul du taux d'absent√©isme
        taux_absenteisme = (jours_absence / jours_travailles) * 100
        
        # Cr√©ation du DataFrame de sortie
        output_data = {
            'Indicateur': [
                'nom_entreprise', 'annee', 'taux_feminisation', 'taux_femmes_cadres',
                'taux_handicap', 'ecart_salaire', 'moins_30_ans', 'entre_30_50_ans',
                'plus_50_ans', 'taux_absenteisme'
            ],
            'Valeur': [
                nom_entreprise, annee, taux_feminisation, taux_femmes_cadres,
                taux_handicap, ecart_salaire, moins_30_pct, entre_30_50_pct,
                plus_50_pct, taux_absenteisme
            ]
        }
        
        return pd.DataFrame(output_data)
    
    except ValueError as ve:
        st.error(f"Erreur de validation des donn√©es : {str(ve)}")
        return None
    except Exception as e:
        st.error(f"Erreur lors de la conversion des donn√©es : {str(e)}")
        return None

# Interface principale
st.markdown("## üìù Instructions")
st.markdown("""
1. T√©l√©chargez d'abord le mod√®le Excel
2. Remplissez-le avec les donn√©es de votre bilan social
3. T√©l√©chargez le fichier rempli
4. L'application convertira automatiquement les donn√©es au format requis
""")

# Bouton pour t√©l√©charger le mod√®le
st.markdown("### 1. T√©l√©charger le mod√®le")
excel_data = create_excel_template()
st.download_button(
    label="üì• T√©l√©charger le mod√®le Excel",
    data=excel_data,
    file_name="modele_bilan_social.xlsx",
    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
)

# Section pour t√©l√©charger le fichier rempli
st.markdown("### 2. T√©l√©charger votre fichier rempli")
uploaded_file = st.file_uploader("Choisissez votre fichier Excel rempli", type=['xlsx'])

if uploaded_file is not None:
    try:
        # Lecture du fichier
        df = pd.read_excel(uploaded_file)
        
        # Conversion des donn√©es
        df_converted = convert_data(df)
        
        if df_converted is not None:
            st.success("‚úÖ Conversion r√©ussie !")
            
            # Affichage des donn√©es converties
            st.markdown("### 3. Donn√©es converties")
            st.dataframe(df_converted)
            
            # Bouton pour t√©l√©charger le fichier CSV
            csv = df_converted.to_csv(index=False)
            st.download_button(
                label="üì• T√©l√©charger le fichier CSV",
                data=csv,
                file_name=f"donnees_di_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                mime="text/csv"
            )
            
            st.markdown("""
            ### 4. Prochaines √©tapes
            1. T√©l√©chargez le fichier CSV g√©n√©r√©
            2. Importez-le dans l'application d'√©valuation D&I
            3. Consultez votre rapport d√©taill√©
            """)
    
    except Exception as e:
        st.error(f"Erreur lors du traitement du fichier : {str(e)}")
        st.error("Veuillez v√©rifier que le fichier est correctement format√©.")

# Pied de page
st.markdown("---")
st.markdown("""
**Convertisseur Bilan Social** | D√©velopp√© par Japhet Calixte N'DRI | Version 1.0
""") 